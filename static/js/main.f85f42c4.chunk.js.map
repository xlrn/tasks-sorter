{"version":3,"sources":["serviceWorker.js","initial-data.js","task.js","column.js","addbar.js","sticky.js","index.js"],"names":["Boolean","window","location","hostname","match","initialData","iteration","value","tasks","columns","id","title","taskIds","columnOrder","Container","styled","div","props","isDragging","Button","button","Task","handleClick","bind","event","this","deleteTask","draggableId","task","index","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","content","onClick","React","Component","Title","h3","TaskLisk","isDraggingOver","Column","column","droppableId","droppableProps","map","key","placeholder","AddBar","handleChange","handleSubmit","onHandleChange","onSubmitForm","target","reset","preventDefault","onSubmit","onChange","type","useStickyState","App","state","onDragEnd","result","newState","destination","source","newTaskIds","Array","from","splice","newColumn","sourceColumn","destColumn","newTaskIdsSource","newTaskIdsDestination","newSourceColumn","newDestColumn","setState","input","addTask","newId","Date","now","toString","newContent","console","log","newTask","push","columnOG","taskIdsOG","removalIndex","findIndex","x","taskList","newTaskList","columnId","taskId","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f85f42c4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialData = { \n    iteration: 0,\n    value: {},\n    tasks: {},\n    columns: {\n    'column-1': {\n        id: 'column-1',\n        title: 'High Priority, Easy',\n        taskIds: [],\n    },\n    'column-2' : {\n        id: 'column-2',\n        title: 'High Priority, Hard',\n        taskIds: [],\n    },\n    'column-3' : {\n        id: 'column-3',\n        title: 'Low Priority, Easy',\n        taskIds: [],\n    },\n    'column-4' : {\n        id: 'column-4',\n        title: 'Low Priority, Hard',\n        taskIds: [],\n    }\n    },\n    columnOrder: ['column-1', 'column-2', 'column-3', 'column-4'],\n};\n\nexport default initialData;","import React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\n\nconst Container = styled.div`\n    border: 1px solid lightgrey;\n    border-radius: 2px;\n    padding: 8px;\n    margin-bottom: 8px;\n    background-color: ${props => (props.isDragging ? 'lightgrey' : 'white')};\n`;\n\nconst Button = styled.button`\n    float: right;\n`;\n\nexport default class Task extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick(event) {\n        this.props.deleteTask(this);\n    }\n\n    render() {\n        return (\n            <Draggable draggableId={this.props.task.id} index={this.props.index}>\n                {(provided, snapshot) => (\n                    <Container \n                        {...provided.draggableProps} \n                        {...provided.dragHandleProps} \n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging}\n                    >\n                        {this.props.task.content}\n                    <Button onClick={this.handleClick}>Delete</Button>    \n                    </Container>\n                    )}\n            </Draggable>\n        );\n    }\n}","import React from 'react';\nimport styled from 'styled-components';\nimport Task from './task';\nimport { Droppable } from 'react-beautiful-dnd';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius: 2px;\n`;\nconst Title = styled.h3`\n    padding: 8px;\n`;\nconst TaskLisk = styled.div`\n    padding 8px;\n    transition: background-color 0.2 ease;\n    background-color: ${props => (props.isDraggingOver ? 'skyblue' : 'white')};\n`;\n\nexport default class Column extends React.Component {\n    constructor(props) {\n        super(props);\n        this.deleteTask = this.deleteTask.bind(this);\n    }\n\n    deleteTask(task) {\n        this.props.deleteTask(task, this);\n    }\n\n    render() {\n        return (\n            <Container>\n                <Title>{this.props.column.title}</Title>\n                <Droppable droppableId={this.props.column.id}>\n                    {(provided, snapshot)=> (\n                    <TaskLisk ref={provided.innerRef} {...provided.droppableProps} \n                        isDraggingOver={snapshot.isDraggingOver}>\n                            {this.props.tasks.map((task, index) => \n                                <Task key={task.id} task={task} index={index} deleteTask= {this.deleteTask}/>)}\n                            {provided.placeholder}\n                    </TaskLisk>\n                    )}\n                </Droppable>\n            </Container>\n        );\n    }\n}","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    border: 1px solid lightgrey;\n    border-radius: 2px;\n    padding: 8px;\n    margin-bottom: 8px;\n    background-color: ${props => (props.isDragging ? 'lightgrey' : 'white')};\n`;\n\nexport default class AddBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n        //this.state = {value: ''};\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.onHandleChange(event);\n    }\n\n    handleSubmit(event) {\n        this.props.onSubmitForm(event);\n        event.target.reset();\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <Container>\n                <form onSubmit={this.handleSubmit}>\n                    <input placeholder=\"Enter new task here\" onChange={this.handleChange} />\n                    <button type=\"submit\">Add</button>\n                </form>\n            </Container>\n        )\n    }\n}","import React, {useEffect} from 'react';\n\nfunction useStickyState(key, defaultValue) {\n    const[state, setState] = React.useState(() => JSON.parse(localStorage.getItem(key)) || defaultValue);\n    useEffect(() => {\n      localStorage.setItem(key, JSON.stringify(state));\n    }, [key,state]);\n    return [state, setState];\n}\n\nexport default useStickyState;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport '@atlaskit/css-reset';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\nimport AddBar from './addbar';\nimport { useStickyState } from './sticky';\n\nclass App extends React.Component {\n\n  state = initialData; \n\n  onDragEnd = result => {\n    const {destination, source, draggableId} = result;\n    var newState;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId && destination.index === source.index\n    ) { \n      return;\n    }\n\n    // figure out some elegant solution to this\n    if (destination.droppableId === source.droppableId && destination.index !== source.index) {\n      const column = this.state.columns[source.droppableId];\n      const newTaskIds = Array.from(column.taskIds);\n      newTaskIds.splice(source.index, 1); // remove 1 item from this index\n      newTaskIds.splice(destination.index, 0, draggableId); // remove 0 items from this index, insert draggableId\n\n      const newColumn = {\n        ...column,\n        taskIds: newTaskIds\n      };\n\n      newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn,\n        }\n      }\n    } else {\n      const sourceColumn = this.state.columns[source.droppableId];\n      const destColumn = this.state.columns[destination.droppableId];\n      const newTaskIdsSource = Array.from(sourceColumn.taskIds);\n      const newTaskIdsDestination = Array.from(destColumn.taskIds);\n      newTaskIdsSource.splice(source.index, 1); // remove 1 item from this index\n      newTaskIdsDestination.splice(destination.index, 0, draggableId); // remove 0 items from this index, insert draggableId\n\n      const newSourceColumn = {\n        ...sourceColumn,\n        taskIds: newTaskIdsSource\n      };\n\n      const newDestColumn = {\n        ...destColumn,\n        taskIds: newTaskIdsDestination\n      }\n\n      newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newSourceColumn.id]: newSourceColumn,\n          [newDestColumn.id]: newDestColumn,\n        },\n      };\n    }\n\n    this.setState(newState);\n\n\n  }\n\n  handleChange = (input) => {\n    var newState = {\n      value: input.target.value,\n    }\n\n    this.setState(newState);\n  } \n\n// FIX THIS SHIT -- I think it works now?\n  addTask = (task) => {\n    const newId = Date.now().toString();\n    const newContent = this.state.value;\n    const column = this.state.columns[\"column-1\"];\n    const newTaskIds = Array.from(column.taskIds);\n    console.log(newContent);\n\n    var newTask = {id: newId, content: newContent}\n\n    newTaskIds.push(newId);\n    console.log(newTaskIds);\n\n    var newColumn = {...column,\n      taskIds: newTaskIds,\n    }\n    \n    console.log(newColumn);\n    console.log(newColumn.taskIds);\n\n    var newState = {\n      ...this.state,\n      tasks: {\n        ...this.state.tasks,\n        [newId] : newTask},\n      columns: {\n        ...this.state.columns, \n        [newColumn.id] : newColumn,},\n      \n    }\n    console.log(newState.tasks);\n    console.log(newState.columns);\n    console.log(newState.columns[newColumn.id].taskIds);\n\n\n\n    this.setState(newState);\n    task.preventDefault();\n  }\n\n  deleteTask = (task, column) => {\n    console.log(task);\n    console.log(column);\n\n    const columnOG = column.props.column;\n    const taskIdsOG = Array.from(columnOG.taskIds);\n    console.log(taskIdsOG);\n    const removalIndex = taskIdsOG.findIndex((x) => x === task.props.task.id);\n    console.log(removalIndex);\n    taskIdsOG.splice(removalIndex, 1);\n    console.log(taskIdsOG);\n\n    const newColumn = column.props.column;\n    newColumn.taskIds = taskIdsOG;\n\n    // delete task from tasks\n    const taskList = this.state.tasks;\n    console.log(taskList);\n    delete taskList[task.props.task.id];\n    const newTaskList = taskList;\n    console.log(newTaskList);\n\n    var newState = {\n      ...this.state,\n      tasks: \n        newTaskList,\n      columns: {\n        ...this.state.columns, \n        [newColumn.id] : newColumn,},\n      \n    }\n\n    console.log(newState.tasks);\n    console.log(newState.columns[newColumn.id].taskIds);\n\n    this.setState(newState);\n  }\n\n  render() {\n    return (\n      <div>\n        <AddBar onSubmitForm={this.addTask} onHandleChange={this.handleChange}/>\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          {this.state.columnOrder.map(columnId => {\n          const column = this.state.columns[columnId];\n          const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n\n          return <Column key = {column.id} column={column} tasks={tasks} deleteTask={this.deleteTask}/>;\n        })}\n        </DragDropContext>\n      </div>\n    );\n  }  \n}\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}