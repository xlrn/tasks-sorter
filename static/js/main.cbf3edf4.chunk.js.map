{"version":3,"sources":["serviceWorker.js","task.js","column.js","addbar.js","index.js"],"names":["Boolean","window","location","hostname","match","Container","styled","div","props","isDragging","Task","draggableId","this","task","id","index","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","content","React","Component","Title","h3","TaskLisk","isDraggingOver","Column","column","title","droppableId","droppableProps","tasks","map","key","placeholder","AddBar","handleChange","bind","handleSubmit","event","onHandleChange","onSubmitForm","preventDefault","onSubmit","onChange","type","App","onDragEnd","result","newState","destination","source","state","columns","newTaskIds","Array","from","taskIds","splice","newColumn","sourceColumn","destColumn","newTaskIdsSource","newTaskIdsDestination","newSourceColumn","newDestColumn","setState","input","value","target","addTask","newId","Date","now","toString","newContent","console","log","newTask","push","iteration","columnOrder","columnId","taskId","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0OCdN,IAAMC,EAAYC,IAAOC,IAAV,KAKS,SAAAC,GAAK,OAAKA,EAAMC,WAAa,YAAc,WAG9CC,E,uKACP,IAAD,OACL,OACI,kBAAC,IAAD,CAAWC,YAAaC,KAAKJ,MAAMK,KAAKC,GAAIC,MAAOH,KAAKJ,MAAMO,QACzD,SAACC,EAAUC,GAAX,OACG,kBAACZ,EAAD,iBACQW,EAASE,eACTF,EAASG,gBAFjB,CAGIC,IAAKJ,EAASK,SACdZ,WAAYQ,EAASR,aAEpB,EAAKD,MAAMK,KAAKS,gB,GAXPC,IAAMC,W,+YCPxC,IAAMnB,EAAYC,IAAOC,IAAV,KAKTkB,EAAQnB,IAAOoB,GAAV,KAGLC,EAAWrB,IAAOC,IAAV,KAGU,SAAAC,GAAK,OAAKA,EAAMoB,eAAiB,UAAY,WAGhDC,E,uKACP,IAAD,OACL,OACI,kBAAC,EAAD,KACI,kBAACJ,EAAD,KAAQb,KAAKJ,MAAMsB,OAAOC,OAC1B,kBAAC,IAAD,CAAWC,YAAapB,KAAKJ,MAAMsB,OAAOhB,KACrC,SAACE,EAAUC,GAAX,OACD,kBAACU,EAAD,eAAUP,IAAKJ,EAASK,UAAcL,EAASiB,eAA/C,CAA+DL,eAAgBX,EAASW,iBACnF,EAAKpB,MAAM0B,MAAMC,KAAI,SAACtB,EAAME,GAAP,OAAiB,kBAAC,EAAD,CAAMqB,IAAKvB,EAAKC,GAAID,KAAMA,EAAME,MAAOA,OAC7EC,EAASqB,qB,GATEd,IAAMC,W,kNChB1C,IAAMnB,EAAYC,IAAOC,IAAV,KAKS,SAAAC,GAAK,OAAKA,EAAMC,WAAa,YAAc,WAG9C6B,E,kDAEjB,WAAY9B,GAAQ,IAAD,8BACf,cAAMA,IAGD+B,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALL,E,yDAQNE,GACT9B,KAAKJ,MAAMmC,eAAeD,K,mCAGjBA,GACT9B,KAAKJ,MAAMoC,aAAaF,GACxBA,EAAMG,mB,+BAIN,OACI,kBAAC,EAAD,KACI,0BAAMC,SAAUlC,KAAK6B,cACjB,2BAAOJ,YAAY,sBAAsBU,SAAUnC,KAAK2B,eACxD,4BAAQS,KAAK,UAAb,a,GAxBgBzB,IAAMC,WCFpCyB,E,kDAGJ,WAAYzC,GAAQ,IAAD,8BACjB,cAAMA,IAmCR0C,UAAY,SAAAC,GAAW,IAEjBC,EADGC,EAAoCF,EAApCE,YAAaC,EAAuBH,EAAvBG,OAAQ3C,EAAewC,EAAfxC,YAG5B,GAAK0C,IAKHA,EAAYrB,cAAgBsB,EAAOtB,aAAeqB,EAAYtC,QAAUuC,EAAOvC,OADjF,CAOA,GAAIsC,EAAYrB,cAAgBsB,EAAOtB,aAAeqB,EAAYtC,QAAUuC,EAAOvC,MAAO,CACxF,IAAMe,EAAS,EAAKyB,MAAMC,QAAQF,EAAOtB,aACnCyB,EAAaC,MAAMC,KAAK7B,EAAO8B,SACrCH,EAAWI,OAAOP,EAAOvC,MAAO,GAChC0C,EAAWI,OAAOR,EAAYtC,MAAO,EAAGJ,GAExC,IAAMmD,EAAS,2BACVhC,GADU,IAEb8B,QAASH,IAGXL,EAAQ,2BACH,EAAKG,OADF,IAENC,QAAQ,2BACH,EAAKD,MAAMC,SADT,kBAEJM,EAAUhD,GAAKgD,UAGf,CAAC,IAAD,EACCC,EAAe,EAAKR,MAAMC,QAAQF,EAAOtB,aACzCgC,EAAa,EAAKT,MAAMC,QAAQH,EAAYrB,aAC5CiC,EAAmBP,MAAMC,KAAKI,EAAaH,SAC3CM,EAAwBR,MAAMC,KAAKK,EAAWJ,SACpDK,EAAiBJ,OAAOP,EAAOvC,MAAO,GACtCmD,EAAsBL,OAAOR,EAAYtC,MAAO,EAAGJ,GAEnD,IAAMwD,EAAe,2BAChBJ,GADgB,IAEnBH,QAASK,IAGLG,EAAa,2BACdJ,GADc,IAEjBJ,QAASM,IAGXd,EAAQ,2BACH,EAAKG,OADF,IAENC,QAAQ,2BACH,EAAKD,MAAMC,SADT,uBAEJW,EAAgBrD,GAAKqD,GAFjB,cAGJC,EAActD,GAAKsD,GAHf,MAQX,EAAKC,SAASjB,KAjGG,EAqGnBb,aAAe,SAAC+B,GACd,IAAIlB,EAAW,CACbmB,MAAOD,EAAME,OAAOD,OAGtB,EAAKF,SAASjB,IA1GG,EA8GnBqB,QAAU,SAAC5D,GACT,IAAM6D,EAAQC,KAAKC,MAAMC,WACnBC,EAAa,EAAKvB,MAAMgB,MACxBzC,EAAS,EAAKyB,MAAMC,QAAQ,YAC5BC,EAAaC,MAAMC,KAAK7B,EAAO8B,SACrCmB,QAAQC,IAAIF,GAEZ,IAAIG,EAAU,CAACnE,GAAI4D,EAAOpD,QAASwD,GAEnCrB,EAAWyB,KAAKR,GAChBK,QAAQC,IAAIvB,GAEZ,IAAIK,EAAS,2BAAOhC,GAAP,IACX8B,QAASH,IAGXsB,QAAQC,IAAIlB,GACZiB,QAAQC,IAAIlB,EAAUF,SAEtB,IAAIR,EAAQ,2BACP,EAAKG,OADE,IAEVrB,MAAM,2BACD,EAAKqB,MAAMrB,OADX,kBAEFwC,EAASO,IACZzB,QAAQ,2BACH,EAAKD,MAAMC,SADT,kBAEJM,EAAUhD,GAAMgD,MAGrBiB,QAAQC,IAAI5B,EAASlB,OACrB6C,QAAQC,IAAI5B,EAASI,SACrBuB,QAAQC,IAAI5B,EAASI,QAAQM,EAAUhD,IAAI8C,SAI3C,EAAKS,SAASjB,GACdvC,EAAKgC,kBAhJL,EAAKU,MAAQ,CACX4B,UAAW,EACXZ,MAAO,GACPrC,MAAO,CACP,SAAU,CAAEpB,GAAI,SAAUQ,QAAS,gBACnC,SAAU,CAAER,GAAI,SAAUQ,QAAS,cACnC,SAAU,CAAER,GAAI,SAAUQ,QAAS,eAEnCkC,QAAS,CACP,WAAY,CACR1C,GAAI,WACJiB,MAAO,QACP6B,QAAS,CAAC,SAAU,WAExB,WAAa,CACT9C,GAAI,WACJiB,MAAO,SACP6B,QAAS,CAAC,WAEd,WAAa,CACT9C,GAAI,WACJiB,MAAO,gBACP6B,QAAS,IAEb,WAAa,CACT9C,GAAI,WACJiB,MAAO,YACP6B,QAAS,KAGjBwB,YAAa,CAAC,WAAY,WAAY,WAAY,aAhCjC,E,qDAsJT,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAQxC,aAAchC,KAAK6D,QAAS9B,eAAgB/B,KAAK2B,eACzD,kBAAC,IAAD,CAAiBW,UAAWtC,KAAKsC,WAC9BtC,KAAK2C,MAAM6B,YAAYjD,KAAI,SAAAkD,GAC5B,IAAMvD,EAAS,EAAKyB,MAAMC,QAAQ6B,GAC5BnD,EAAQJ,EAAO8B,QAAQzB,KAAI,SAAAmD,GAAM,OAAI,EAAK/B,MAAMrB,MAAMoD,MAE5D,OAAO,kBAAC,EAAD,CAAQlD,IAAON,EAAOhB,GAAIgB,OAAQA,EAAQI,MAAOA,a,GAlKhDX,IAAMC,WA0KxB+D,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SJlDpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.cbf3edf4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\n\nconst Container = styled.div`\n    border: 1px solid lightgrey;\n    border-radius: 2px;\n    padding: 8px;\n    margin-bottom: 8px;\n    background-color: ${props => (props.isDragging ? 'lightgrey' : 'white')};\n`;\n\nexport default class Task extends React.Component {\n    render() {\n        return (\n            <Draggable draggableId={this.props.task.id} index={this.props.index}>\n                {(provided, snapshot) => (\n                    <Container \n                        {...provided.draggableProps} \n                        {...provided.dragHandleProps} \n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging}\n                    >\n                        {this.props.task.content}\n                        \n                    </Container>\n                    )}\n            </Draggable>\n        );\n    }\n}","import React from 'react';\nimport styled from 'styled-components';\nimport Task from './task';\nimport { Droppable } from 'react-beautiful-dnd';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    border-radius: 2px;\n`;\nconst Title = styled.h3`\n    padding: 8px;\n`;\nconst TaskLisk = styled.div`\n    padding 8px;\n    transition: background-color 0.2 ease;\n    background-color: ${props => (props.isDraggingOver ? 'skyblue' : 'white')};\n`;\n\nexport default class Column extends React.Component {\n    render() {\n        return (\n            <Container>\n                <Title>{this.props.column.title}</Title>\n                <Droppable droppableId={this.props.column.id}>\n                    {(provided, snapshot)=> (\n                    <TaskLisk ref={provided.innerRef} {...provided.droppableProps} isDraggingOver={snapshot.isDraggingOver}>\n                        {this.props.tasks.map((task, index) => <Task key={task.id} task={task} index={index} />)}\n                        {provided.placeholder}\n                    </TaskLisk>\n                    )}\n                </Droppable>\n            </Container>\n        );\n    }\n}","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    border: 1px solid lightgrey;\n    border-radius: 2px;\n    padding: 8px;\n    margin-bottom: 8px;\n    background-color: ${props => (props.isDragging ? 'lightgrey' : 'white')};\n`;\n\nexport default class AddBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n        //this.state = {value: ''};\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.onHandleChange(event);\n    }\n\n    handleSubmit(event) {\n        this.props.onSubmitForm(event);\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <Container>\n                <form onSubmit={this.handleSubmit}>\n                    <input placeholder=\"Enter new task here\" onChange={this.handleChange}/>\n                    <button type=\"submit\">Add</button>\n                </form>\n            </Container>\n        )\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport '@atlaskit/css-reset';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport initialData from './initial-data';\nimport Column from './column';\nimport AddBar from './addbar';\n\nclass App extends React.Component {\n  //state = initialData;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      iteration: 0,\n      value: {},\n      tasks: {        \n      'task-1': { id: 'task-1', content: 'do something' },\n      'task-2': { id: 'task-2', content: 'do nothing'},\n      'task-3': { id: 'task-3', content: 'just do it'},\n      },\n      columns: {\n        'column-1': {\n            id: 'column-1',\n            title: 'to do',\n            taskIds: ['task-1', 'task-2'],\n        },\n        'column-2' : {\n            id: 'column-2',\n            title: 'not do',\n            taskIds: ['task-3'],\n        },\n        'column-3' : {\n            id: 'column-3',\n            title: 'not important',\n            taskIds: [],\n        },\n        'column-4' : {\n            id: 'column-4',\n            title: 'important',\n            taskIds: [],\n        }\n    },\n    columnOrder: ['column-1', 'column-2', 'column-3', 'column-4'],\n    };\n  }\n\n  onDragEnd = result => {\n    const {destination, source, draggableId} = result;\n    var newState;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId && destination.index === source.index\n    ) { \n      return;\n    }\n\n    // figure out some elegant solution to this\n    if (destination.droppableId === source.droppableId && destination.index !== source.index) {\n      const column = this.state.columns[source.droppableId];\n      const newTaskIds = Array.from(column.taskIds);\n      newTaskIds.splice(source.index, 1); // remove 1 item from this index\n      newTaskIds.splice(destination.index, 0, draggableId); // remove 0 items from this index, insert draggableId\n\n      const newColumn = {\n        ...column,\n        taskIds: newTaskIds\n      };\n\n      newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn,\n        }\n      }\n    } else {\n      const sourceColumn = this.state.columns[source.droppableId];\n      const destColumn = this.state.columns[destination.droppableId];\n      const newTaskIdsSource = Array.from(sourceColumn.taskIds);\n      const newTaskIdsDestination = Array.from(destColumn.taskIds);\n      newTaskIdsSource.splice(source.index, 1); // remove 1 item from this index\n      newTaskIdsDestination.splice(destination.index, 0, draggableId); // remove 0 items from this index, insert draggableId\n\n      const newSourceColumn = {\n        ...sourceColumn,\n        taskIds: newTaskIdsSource\n      };\n\n      const newDestColumn = {\n        ...destColumn,\n        taskIds: newTaskIdsDestination\n      }\n\n      newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newSourceColumn.id]: newSourceColumn,\n          [newDestColumn.id]: newDestColumn,\n        },\n      };\n    }\n\n    this.setState(newState);\n\n  }\n\n  handleChange = (input) => {\n    var newState = {\n      value: input.target.value,\n    }\n\n    this.setState(newState);\n  } \n\n// FIX THIS SHIT\n  addTask = (task) => {\n    const newId = Date.now().toString();\n    const newContent = this.state.value;\n    const column = this.state.columns[\"column-1\"];\n    const newTaskIds = Array.from(column.taskIds);\n    console.log(newContent);\n\n    var newTask = {id: newId, content: newContent}\n\n    newTaskIds.push(newId);\n    console.log(newTaskIds);\n\n    var newColumn = {...column,\n      taskIds: newTaskIds,\n    }\n    \n    console.log(newColumn);\n    console.log(newColumn.taskIds);\n\n    var newState = {\n      ...this.state,\n      tasks: {\n        ...this.state.tasks,\n        [newId] : newTask},\n      columns: {\n        ...this.state.columns, \n        [newColumn.id] : newColumn,},\n      \n    }\n    console.log(newState.tasks);\n    console.log(newState.columns);\n    console.log(newState.columns[newColumn.id].taskIds);\n\n\n\n    this.setState(newState);\n    task.preventDefault();\n  }\n\n\n  render() {\n    return (\n      <div>\n        <AddBar onSubmitForm={this.addTask} onHandleChange={this.handleChange}/>\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          {this.state.columnOrder.map(columnId => {\n          const column = this.state.columns[columnId];\n          const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n\n          return <Column key = {column.id} column={column} tasks={tasks}/>;\n        })}\n        </DragDropContext>\n      </div>\n    );\n  }  \n}\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}